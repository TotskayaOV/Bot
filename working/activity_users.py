from loader import db, dp, log_id
from external_database import writing_status, writing_jira_status, google_update, rewriting_data
from send_massage import notify
from keyboards import kb_div_nd_inline, kb_coord_inline, kb_div_inline
from external_database import name_company_number
from .comment_area import update_agent_comment, call_admin, call_coor, call_div, call_all, \
    sent_to_com_applications, overwriting_comment, chat_text


def verification_agent(data: dict):
    """
    –ò—â–µ—Ç –≤ —Ä–∞–±–æ—á–µ–π –î–ë –∞–≥–µ–Ω—Ç–∞ –ø–æ –ò–ù–ù, –ø–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é info_from_dump –≤ –≤–∏–¥–µ
    (id, name, phone, inn, company, datatime up, ‚Ññrow, comment). –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä—É—è —Å—Ç—Ä–æ–∫—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    text_mes –≤ call_coor(). –ò–∑ info_from_dump –ø–æ–ª—É—á–∞–µ—Ç id –∞–≥–µ–Ω—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–π –ë–î –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ Googlesheets.
    –ß–µ—Ä–µ–∑ sent_to_com_applications() —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –ß–µ—Ä–µ–∑ id_–∞–≥–µ–Ω—Ç–∞ —É–¥–∞–ª—è–µ—Ç
    –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–±–æ—á–µ–π –ë–î. –ß–µ—Ä–µ–∑ name_company_number –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏.
    –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" —á–µ—Ä–µ–∑ writing_status()
    text_wdb: {'agent_name': str, 'phone_number': int, 'inn_number': int, 'company_name': str, 'date_up': str,
    'date_down': str, 'comment': str}
    :param data: —Å–ª–æ–≤–∞—Ä—å {'–§–ò–û': str, '–¢–µ–ª–µ—Ñ–æ–Ω': str, '–ò–ù–ù': str, '–ö–æ–º–ø–∞–Ω–∏—è': str}
    :return:
    """
    try:
        if len(db.get_dump_agent(inn_number=data.get('–ò–ù–ù'))) < 2:
            info_from_dump = db.get_dump_agent(inn_number=data.get('–ò–ù–ù'))[0]
            text_mes = data.get('–§–ò–û') + " " + data.get('–ö–æ–º–ø–∞–Ω–∏—è') + '\n–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω üçå'
            call_coor(text_mes)
            id_agent_dump = info_from_dump[0]
            text_wdb = sent_to_com_applications(info_from_dump, data.get('last_user'))
            num_row = info_from_dump[6]
            db.remove_dump_agent(id_agent_dump)
            db.add_com_applications(text_wdb)
            num_table = name_company_number(text_wdb.get('company_name'))
            writing_status(str(num_row), num_table)
        else:
            duplication_TIN_information(db.get_dump_agent(inn_number=data.get('–ò–ù–ù')))
    except Exception as err:
        notify(data.get('last_user'), '–•–≤–∞—Ç–∏—Ç —Ç—ã–∫–∞—Ç—å!')
        notify(log_id, f"{db.get_user_access(user_id=data.get('last_user'))[0][2]} "
                       f"–∑–∞—Ç—ã–∫–∏–≤–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ: {data.get('–§–ò–û')} ü§¨\n{err}")


def div_cancel_agent(data: dict):
    try:
        if len(db.get_dump_agent(inn_number=data.get('–ò–ù–ù'))) < 2:
            try:
                info_from_dump = db.get_dump_agent(inn_number=data.get('–ò–ù–ù'))[0]
            except:
                info_from_dump = db.get_dump_agent(phone_number=data.get('–¢–µ–ª–µ—Ñ–æ–Ω'))[0]
            text_mes = data.get('–§–ò–û') + " " + data.get('–ö–æ–º–ø–∞–Ω–∏—è') + '\n–æ—Ç–∫–∞–∑ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ üí©'
            call_div(text_mes)
            id_agent_dump = info_from_dump[0]
            text_wdb = sent_to_com_applications(info_from_dump, data.get('last_user'))
            text_wdb['comment'] = overwriting_comment(text_wdb.get('comment'), '–æ—Ç–∫–∞–∑ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞')
            num_row = info_from_dump[6]
            db.add_com_applications(text_wdb)
            db.remove_dump_agent(id_agent_dump)
            num_table = name_company_number(text_wdb.get('company_name'))
            writing_jira_status(str(num_row), num_table)
        else:
            duplication_TIN_information(db.get_dump_agent(inn_number=data.get('–ò–ù–ù')))
    except Exception as err:
        notify(data.get('last_user'), f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {data.get('–§–ò–û')} —É–∂–µ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Ä–∞–±–æ—á–∏—Ö –¥–∞–Ω–Ω—ã—Ö ü§´")
        notify(log_id, f"{data.get('last_user')} –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {data.get('–§–ò–û')}\n{err}")


def div_jira_agent(data: dict):
    try:
        if len(db.get_dump_agent(inn_number=data.get('–ò–ù–ù'))) < 2:
            if len(db.get_dump_agent(inn_number=data.get('–ò–ù–ù'))) == 1:
                info_from_dump = db.get_dump_agent(inn_number=data.get('–ò–ù–ù'))[0]
            else:
                info_from_dump = db.get_dump_agent(phone_number=data.get('–¢–µ–ª–µ—Ñ–æ–Ω'))[0]
            text_mes = data.get('–§–ò–û') + " " + data.get('–ö–æ–º–ø–∞–Ω–∏—è') + '\nJIRA ü§ì'
            call_div(text_mes)
            id_agent_dump = info_from_dump[0]
            text_wdb = sent_to_com_applications(info_from_dump, data.get('last_user'))
            text_wdb['comment'] = overwriting_comment(text_wdb.get('comment'), 'JIRA')
            num_row = info_from_dump[6]
            db.add_com_applications(text_wdb)
            db.remove_dump_agent(id_agent_dump)
            num_table = name_company_number(text_wdb.get('company_name'))
            writing_jira_status(str(num_row), num_table)
        else:
            duplication_TIN_information(db.get_dump_agent(inn_number=data.get('–ò–ù–ù')))
    except Exception as err:
        notify(data.get('last_user'), f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {data.get('–§–ò–û')} —É–∂–µ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Ä–∞–±–æ—á–∏—Ö –¥–∞–Ω–Ω—ã—Ö ü§´")
        notify(log_id, f"{data.get('last_user')} –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ {data.get('–§–ò–û')}\n{err}")


async def div_update_agent(data: dict):
    """

    :param last_user:
    :param data:
    :return:
    """
    try:
        if len(db.get_dump_agent(inn_number=data.get('–ò–ù–ù'))) < 2:
            if len(db.get_dump_agent(inn_number=data.get('–ò–ù–ù'))) == 1:
                info_from_dump = db.get_dump_agent(inn_number=data.get('–ò–ù–ù'))[0]
            else:
                info_from_dump = db.get_dump_agent(phone_number=data.get('–¢–µ–ª–µ—Ñ–æ–Ω'))[0]
            text_mes = data.get('–§–ò–û') + " " + data.get('–ö–æ–º–ø–∞–Ω–∏—è') + '\n–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ü§ì'
            call_div(text_mes)
            num_row = info_from_dump[6]
            num_table = name_company_number(info_from_dump[4])
            value = rewriting_data(num_table, num_row, google_update(str(num_row), num_table))
            update_agent_comment(info_from_dump, value)
            my_adminset = db.get_user_access(user_role='admin')
            if (value.get('inn_number') == '') or (value.get('phone_number') == ''):
                my_divset = db.get_user_access(user_role='divisional_mentor')
                if my_divset:
                    my_adminset.extend(my_divset)
                for y in range(len(my_adminset)):
                    chat_id = my_adminset[y][1]
                    text_mess = chat_text(value) + "\n–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –î–ê–ù–ù–´–•"
                    await dp.bot.send_message(chat_id, text=text_mess, reply_markup=kb_div_nd_inline)
            else:
                my_coorset = db.get_user_access(user_role='coordinator')
                if my_coorset:
                    my_adminset.extend(my_coorset)
                for y in range(len(my_adminset)):
                    chat_id = my_adminset[y][1]
                    text_mess = chat_text(value)
                    await dp.bot.send_message(chat_id, text=text_mess, reply_markup=kb_coord_inline)
        else:
            duplication_TIN_information(db.get_dump_agent(inn_number=data.get('–ò–ù–ù')))
    except Exception as err:
        notify(data.get('last_user'), f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —Ä–∞–±–æ—á–∏—Ö –¥–∞–Ω–Ω—ã—Ö ü§´")
        notify(log_id, f"{data.get('last_user')} –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n{err}")


async def add_new_comment(data: dict, last_user: int):
    """
    –ß–µ—Ä–µ–∑ add_dump_comm –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ë–î –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ. –§–æ—Ä–º–∏—Ä—É–µ—Ç –ª–∏—Å—Ç —Å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑
    get_user_access –∏ —Ü–∏–∫–ª–æ–º for –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –∏—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å text_mess (—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ agent_data –æ—Ç
    get_dump_agent, –ø–æ–∏—Å–∫ –ø–æ –ò–ù–ù)
    :param last_user:
    :param data: {'inn_number': '(–ò–ù–ù)', 'comment': '—Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ—Ç —Å (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏)'}
    :return: dp.bot.send_message
    """
    try:
        if len(db.get_dump_agent(inn_number=data.get('–ò–ù–ù'))) < 2:
            if data.get('inn_number', False):
                agent_data = db.get_dump_agent(inn_number=data.get('inn_number'))[0]
                data['comment'] = overwriting_comment(agent_data[7], data.get('comment'))
                db.add_dump_comm(data)
            else:
                agent_data = db.get_dump_agent(phone_number=data.get('phone_number'))[0]
                data['comment'] = overwriting_comment(agent_data[7], data.get('comment'))
                db.add_dump_comm_phone(data)
            db.add_dump_comm(data)
            my_adminset = db.get_user_access(user_role='admin')
            my_divset = db.get_user_access(user_role='divisional_mentor')
            if my_divset:
                my_adminset.extend(my_divset)
            text_mess = f"–§–ò–û: {agent_data[1]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {agent_data[2]}\n–ò–ù–ù: {agent_data[3]}\n" \
                        f"–ö–æ–º–ø–∞–Ω–∏—è: {agent_data[4]}\n{data.get('comment')}"
            for y in range(len(my_adminset)):
                chat_id = my_adminset[y][1]
                if data.get('comment').endswith('–æ—à–∏–±–∫–∞ –≤ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞') \
                        or data.get('comment').endswith('–æ—à–∏–±–∫–∞ –≤ –Ω–æ–º–µ—Ä–µ –ò–ù–ù'):
                    await dp.bot.send_message(chat_id, text=text_mess, reply_markup=kb_div_nd_inline)
                else:
                    await dp.bot.send_message(chat_id, text=text_mess, reply_markup=kb_div_inline)
            call_coor(f"–§–ò–û: {agent_data[1]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ")
        else:
            duplication_TIN_information(db.get_dump_agent(inn_number=data.get('–ò–ù–ù')))
    except Exception as err:
        notify(last_user, f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –ò–ù–ù {data.get("inn_number")} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ')
        call_admin(f"{db.get_user_access(user_id=last_user)[0][2]} "
                   f"–ø—ã—Ç–∞–µ—Ç—Å—è —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ò–ù–ù: {data.get('inn_number')} ü§¨\n{err}")


def duplication_TIN_information(agent_tuples: list):
    string_message = ''
    for i_dict in range(len(agent_tuples)):
        string_message += f'{agent_tuples[i_dict][1]} —Ç.: {agent_tuples[i_dict][2]} ' \
                          f'–ò–ù–ù: {agent_tuples[i_dict][2]} –ö–æ–º–ø–∞–Ω–∏—è: {agent_tuples[i_dict][3]}\n'
    string_message += 'üÜò–î–ê–ù–ù–´–ï –ò–ù–ù –î–£–ë–õ–ò–†–£–Æ–¢–°–ØüÜò'
    call_all(string_message)
